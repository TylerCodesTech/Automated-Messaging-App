import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import pyautogui
import time
import tkinter.font as tkFont

class MessagingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Automated Messaging App")#Change this if you wanna change the app name

        tab_control = ttk.Notebook(root)

        # Message Sending Tab
        self.send_tab = ttk.Frame(tab_control)
        tab_control.add(self.send_tab, text='Send Messages')
        self.setup_send_tab()

        # Analytics Tab
        self.analytics_tab = ttk.Frame(tab_control)
        tab_control.add(self.analytics_tab, text='Analytics')
        self.setup_analytics_tab()

        # Settings Tab
        self.settings_tab = ttk.Frame(tab_control)
        tab_control.add(self.settings_tab, text='Settings')
        self.setup_settings_tab()

        tab_control.pack(expand=1, fill="both")

        self.total_messages_sent = 0
        self.message_start_time = 0

    def setup_send_tab(self):
        tk.Label(self.send_tab, text="Enter your messages below:").pack()
        self.input_text = scrolledtext.ScrolledText(self.send_tab, height=10)
        self.input_text.pack()

        self.start_button = tk.Button(self.send_tab, text="Start Sending", command=self.start_sending)
        self.start_button.pack()

        self.stop_button = tk.Button(self.send_tab, text="Stop", command=self.stop_sending, state=tk.DISABLED)
        self.stop_button.pack()

        self.progress_label = tk.Label(self.send_tab, text="Progress: 0%")
        self.progress_label.pack()
        self.log = scrolledtext.ScrolledText(self.send_tab, height=10, state='disabled')
        self.log.pack()

        # Set monospaced font for log
        font = tkFont.Font(family="Courier", size=10)
        self.log.configure(font=font)

        self.stop_requested = False

    def setup_analytics_tab(self):
        self.total_messages_label = tk.Label(self.analytics_tab, text="Total messages sent: 0")
        self.total_messages_label.pack()
        self.average_time_label = tk.Label(self.analytics_tab, text="Average time per message: 0s")
        self.average_time_label.pack()

    def setup_settings_tab(self):
        tk.Label(self.settings_tab, text="Number of messages to send:").pack()
        self.num_messages_var = tk.StringVar(value="1")
        tk.Entry(self.settings_tab, textvariable=self.num_messages_var).pack()

        tk.Label(self.settings_tab, text="Start delay (seconds):").pack()
        self.start_delay_var = tk.StringVar(value="5")
        tk.Entry(self.settings_tab, textvariable=self.start_delay_var).pack()

        tk.Label(self.settings_tab, text="Delay between messages (seconds):").pack()
        self.message_delay_var = tk.StringVar(value="1")
        tk.Entry(self.settings_tab, textvariable=self.message_delay_var).pack()

    def start_sending(self):
        messages = self.input_text.get("1.0", "end-1c").splitlines()
        if not messages:
            messagebox.showwarning("Warning", "No messages entered.")
            return

        try:
            repeats = int(self.num_messages_var.get())
            delay = float(self.message_delay_var.get())
            start_delay = float(self.start_delay_var.get())
        except ValueError:
            messagebox.showerror("Error", "Invalid settings values.")
            return

        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.message_start_time = time.time()

        # Start countdown before message sending starts
        self.countdown(int(start_delay), messages, repeats, delay)

    def countdown(self, count, messages, repeats, delay):
        if count > 0:
            self.progress_label.config(text=f"Starting in {count} seconds...")
            self.root.after(1000, self.countdown, count-1, messages, repeats, delay)
        else:
            # Countdown finished, start sending messages
            threading.Thread(target=self.send_messages, args=(messages, repeats, delay), daemon=True).start()

    def send_messages(self, messages, repeats, delay):
        time.sleep(delay)  # Wait for the specified start delay
        sent_messages = 0

        for _ in range(repeats):
            if self.stop_requested:
                break
            for message in messages:
                if self.stop_requested:
                    break
                self.log_message(f"Sending message: {message}")
                pyautogui.typewrite(message)  # Simulates typing the message
                pyautogui.press("enter")  # Simulates pressing Enter
                sent_messages += 1
                self.update_progress(sent_messages, len(messages) * repeats)
                time.sleep(delay)

        self.total_messages_sent += sent_messages
        self.update_analytics()

        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.stop_requested = False

    def stop_sending(self):
        self.stop_requested = True
        self.stop_button.config(state=tk.DISABLED)
        self.log_message("Stopping...")

    def log_message(self, message, msg_type="info"):
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
        formatted_message = f"{timestamp} - {message}\n"

        self.log.config(state='normal')

        # Color coding
        if msg_type == "error":
            self.log.tag_config("error", foreground="red")
            self.log.insert(tk.END, formatted_message, "error")
        elif msg_type == "info":
            self.log.tag_config("info", foreground="green")
            self.log.insert(tk.END, formatted_message, "info")
        else:
            self.log.insert(tk.END, formatted_message)

        self.log.config(state='disabled')
        self.log.yview(tk.END)

    def update_progress(self, sent_messages, total_messages):
        progress = (sent_messages / total_messages) * 100
        self.progress_label.config(text=f"Progress: {progress:.2f}%")

    def update_analytics(self):
        total_time = time.time() - self.message_start_time
        average_time = total_time / self.total_messages_sent if self.total_messages_sent else 0
        self.total_messages_label.config(text=f"Total messages sent: {self.total_messages_sent}")
        self.average_time_label.config(text=f"Average time per message: {average_time:.2f}s")

if __name__ == "__main__":
    root = tk.Tk()
    app = MessagingApp(root)
    root.mainloop()
